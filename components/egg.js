import { eggs } from '../qr_codes/easter-data'

let palettes = [
  ['#fcf0cf', '#f3d1dc', '#f6a7c1', '#fdcf76', '#b16e4b'],
  ['#e7cfc8', '#89aeb2', '#97f2f3', '#f1e0b0', '#f1cdb0'],
  ['#c1cd97', '#c8b4ba', '#f3ddb3', '#e18d96', '#909090'],
  ['#b2ebe0', '#38908f', '#5e96ae', '#ffbfa3', '#e08963'],
  ['#d9effc', '#70ae98', '#ecbe7a', '#e58b88', '#9dabdd'],
  ['#bc85a3', '#f9e1e0', '#fead89', '#9799ba', '#bc85a3'],
  ['#f0a35e', '#ca7e8d', '#adddce', '#70a398', '#e6b655'],
  ['#d7e7a9', '#b5ddd1', '#d3c0f9', '#f99a9c', '#fdbccf']
]
let egg_path =
  'M 748.22738,617.27582 C 741.56542,739.09258 698.47008,870.65596 592.21291,940.93445 473.82988,1018.0025 313.27239,1017.289 189.727,952.56061 81.582452,896.47785 20.533549,778.14644 6.8101586,660.50444 -23.438768,447.93424 47.345632,215.92541 213.86979,75.307502 268.55076,31.399454 338.94205,-15.626627 412.23386,5.0056437 523.43044,41.3255 606.7546,133.82793 664.25447,232.45839 c 66.17223,115.96725 93.25951,252.07892 83.97291,384.81743 z'
let t_stars = [
  'M 509.99805 114.14648 C 496.61945 113.62618 445.78251 214.31736 433.71289 218.41016 C 421.45171 222.56791 316.79595 171.93327 309.32031 182.50391 C 301.84466 193.07455 384.45771 274.87637 384.62305 287.82227 C 384.78839 300.76818 304.29198 384.65303 312.03516 395.0293 C 319.77834 405.40557 423.10538 352.11573 435.46875 355.95898 C 447.83213 359.80223 502.73685 462.2808 514.99805 458.12305 C 527.25923 453.96528 508.50678 339.22689 515.98242 328.65625 C 523.45807 318.0856 637.888 297.53574 637.72266 284.58984 C 637.55731 271.64393 522.64161 254.02276 514.89844 243.64648 C 507.15526 233.27022 522.9708 118.0913 510.60742 114.24805 C 510.41424 114.188 510.21041 114.15474 509.99805 114.14648 z '
]
let b_stars = [
  'M 544.2207 625.30664 C 544.07809 625.31215 543.94224 625.33471 543.8125 625.375 C 535.50898 627.95362 546.10826 705.30661 540.90625 712.27344 C 535.70425 719.24027 458.52757 731.05215 458.41406 739.74609 C 458.30055 748.44004 535.14182 762.26301 540.16016 769.36328 C 545.1785 776.46355 532.56352 853.51407 540.79688 856.30859 C 549.03024 859.10312 585.92306 790.29347 594.22656 787.71484 C 602.53008 785.13622 671.90932 820.94339 677.11133 813.97656 C 682.31333 807.00973 628.27126 750.66074 628.38477 741.9668 C 628.49828 733.27285 683.99296 678.35223 678.97461 671.25195 C 673.95627 664.15169 603.665 698.13633 595.43164 695.3418 C 587.32693 692.59093 553.20536 624.95977 544.2207 625.30664 z ',
  'M 246.30859 632.40234 C 236.56174 633.11059 196.55047 694.71651 188.33008 696.55273 C 179.84451 698.4482 113.60241 657.12338 107.85156 663.64453 C 102.10071 670.16568 151.38591 730.71902 150.56641 739.375 C 149.74691 748.03098 89.973567 798.25962 94.398438 805.74414 C 98.823315 813.22866 171.64396 785.06921 179.62305 788.52344 C 187.60214 791.97768 216.90115 864.34663 225.38672 862.45117 C 233.87228 860.55571 229.59291 782.59732 235.34375 776.07617 C 241.0946 769.55502 318.97542 764.05247 319.79492 755.39648 C 320.61442 746.7405 245.14948 726.72086 240.72461 719.23633 C 236.29974 711.75181 255.13338 635.98157 247.1543 632.52734 C 246.90495 632.4194 246.62301 632.3795 246.30859 632.40234 z '
]
let t_circles = [
  'm 483.43435,171.35985 a 74.395805,74.395805 0 0 1 -74.39581,74.3958 74.395805,74.395805 0 0 1 -74.3958,-74.3958 74.395805,74.395805 0 0 1 74.3958,-74.395807 74.395805,74.395805 0 0 1 74.39581,74.395807 z',
  'm 445.82121,373.54352 a 52.51469,52.51469 0 0 1 -52.51469,52.51469 52.51469,52.51469 0 0 1 -52.51469,-52.51469 52.51469,52.51469 0 0 1 52.51469,-52.51469 52.51469,52.51469 0 0 1 52.51469,52.51469 z',
  'M 264.59026,384.6778 A 88.983223,88.983223 0 0 1 175.60704,473.66102 88.983223,88.983223 0 0 1 86.623817,384.6778 88.983223,88.983223 0 0 1 175.60704,295.69457 88.983223,88.983223 0 0 1 264.59026,384.6778 Z',
  'm 610.63626,252.38033 a 48.138462,48.138462 0 0 1 -48.13846,48.13846 48.138462,48.138462 0 0 1 -48.13846,-48.13846 48.138462,48.138462 0 0 1 48.13846,-48.13847 48.138462,48.138462 0 0 1 48.13846,48.13847 z',
  'm 629.06431,406.59515 a 51.055946,51.055946 0 0 1 -51.05595,51.05595 51.055946,51.055946 0 0 1 -51.05594,-51.05595 51.055946,51.055946 0 0 1 51.05594,-51.05594 51.055946,51.055946 0 0 1 51.05595,51.05594 z',
  'm 283.64631,172.92519 a 45.220982,45.220982 0 0 1 -45.22099,45.22098 45.220982,45.220982 0 0 1 -45.22098,-45.22098 45.220982,45.220982 0 0 1 45.22098,-45.22099 45.220982,45.220982 0 0 1 45.22099,45.22099 z'
]
let b_circles = [
  'm 516.53907,688.59564 a 56.890911,56.890911 0 0 1 -56.89091,56.89091 56.890911,56.890911 0 0 1 -56.89091,-56.89091 56.890911,56.890911 0 0 1 56.89091,-56.89091 56.890911,56.890911 0 0 1 56.89091,56.89091 z',
  'M 202.93282,643.5058 A 70.019585,70.019585 0 0 1 132.91324,713.52538 70.019585,70.019585 0 0 1 62.893654,643.5058 70.019585,70.019585 0 0 1 132.91324,573.48621 70.019585,70.019585 0 0 1 202.93282,643.5058 Z',
  'm 704.98113,619.21851 a 72.937065,72.937065 0 0 1 -72.93706,72.93706 72.937065,72.937065 0 0 1 -72.93707,-72.93706 72.937065,72.937065 0 0 1 72.93707,-72.93707 72.937065,72.937065 0 0 1 72.93706,72.93707 z',
  'm 358.79177,818.86871 a 72.937065,72.937065 0 0 1 -72.93706,72.93707 72.937065,72.937065 0 0 1 -72.93707,-72.93707 72.937065,72.937065 0 0 1 72.93707,-72.93706 72.937065,72.937065 0 0 1 72.93706,72.93706 z',
  'm 378.49128,577.78259 a 49.597206,49.597206 0 0 1 -49.59721,49.59721 49.597206,49.597206 0 0 1 -49.5972,-49.59721 49.597206,49.597206 0 0 1 49.5972,-49.5972 49.597206,49.597206 0 0 1 49.59721,49.5972 z',
  'm 571.69279,844.67023 a 51.055946,51.055946 0 0 1 -51.05595,51.05594 51.055946,51.055946 0 0 1 -51.05595,-51.05594 51.055946,51.055946 0 0 1 51.05595,-51.05595 51.055946,51.055946 0 0 1 51.05595,51.05595 z'
]
let t_waves = [
  'M 374.76537,0.00397015 C 315.20966,0.44659015 259.15159,38.94535 213.86889,75.3067 c -1.20688,1.01913 -2.39107,2.05921 -3.58789,3.08789 23.96732,18.36661 105.52119,77.76203 157.41406,77.1172 C 423.0759,154.8236 509.81187,86.61151 529.83569,70.24811 494.80108,41.92462 455.64169,19.18402 412.23413,5.0059202 399.6371,1.4597502 387.126,-0.08788985 374.76537,0.00397015 Z',
  'm 631.77148,181.66992 c -421.18099,545.55339 -210.59049,272.77669 0,0 z M 117.5918,180.70898 c -78.394533,546.19401 -39.197267,273.09701 0,0 z m -0.58008,0.82422 c -26.072232,37.07268 -47.84685,77.10397 -65.253908,119.07032 48.070736,51.97813 63.605978,142.64222 130.070308,157.95507 67.83475,15.62858 120.3406,-84.39248 189.90821,-86.87304 76.87912,-2.74126 142.69204,103.58592 216.17187,80.8125 C 648.11575,433.83807 645.51615,349.98374 696.54297,297.7168 687.06458,275.39099 676.3112,253.58944 664.25391,232.45898 654.23796,215.27844 643.42005,198.29412 631.82617,181.75 588.90285,231.593 568.66066,326.49933 503.05664,331.2793 446.15893,335.42492 430.79367,220.25852 373.75586,219.15234 312.92476,217.97259 291.69343,340.8733 231.32422,333.29883 168.48312,325.41422 155.11428,232.12514 117.01172,181.5332 Z',
  'm 213.86914,75.306641 c -142.579427,616.462239 -71.28971,308.231119 0,0 z m 0,0 c -37.05007,31.286189 -69.3482,67.105139 -96.86133,106.218749 v 0.002 c 38.10579,50.59065 51.473,143.88659 114.31641,151.77149 60.36921,7.57447 81.60054,-115.32624 142.43164,-114.14649 57.03781,1.10618 72.40307,116.27258 129.30078,112.12696 65.60402,-4.77997 85.84621,-99.6863 128.76953,-149.5293 v -0.002 C 602.84383,140.39154 568.89709,101.85599 529.82227,70.259766 509.77646,86.640092 423.06541,154.82366 367.69531,155.51172 315.80244,156.15655 234.24857,96.761137 210.28125,78.394531 c 1.19682,-1.028685 2.38101,-2.068764 3.58789,-3.08789 z m 314.51758,-6.207032 c 0.21777,0.174537 0.4388,0.344564 0.65625,0.519532 -0.21741,-0.174977 -0.43852,-0.344986 -0.65625,-0.519532 z'
]
let b_waves = [
  'm 371.22266,531.20312 c -60.97614,-0.57753 -115.74899,51.98487 -177.27344,52.61329 -66.6203,0.68047 -128.833232,-34.01148 -193.25000125,-51.01758 -1.89243175,42.75706 0.12143088,85.6119 6.11132815,127.70508 0.1248298,1.07008 0.2618703,2.14078 0.3945312,3.21093 59.9793359,23.52357 115.6108019,74.16967 179.9375019,70.57032 69.84391,-3.90807 115.65282,-98.52768 185.60351,-97.93946 62.23591,0.52334 101.73203,83.54436 163.64453,89.90235 72.02996,7.39698 138.44813,-42.47768 207.67188,-63.7168 1.97116,-15.14439 3.34475,-30.27416 4.16406,-45.25586 1.9467,-27.82524 2.28866,-55.79806 1.01367,-83.70312 v -0.006 c -78.31808,19.28738 -154.59145,64.747 -234.95507,57.86132 -49.7157,-4.25972 -87.35647,-56.66256 -137.14258,-60 -1.98032,-0.13275 -3.95295,-0.20596 -5.91992,-0.22461 z m 372.83593,131.35547 c -496.03906,224.96094 -248.01953,112.48047 0,0 z M 7.2050781,663.7168 c -4.8033854,224.1888 -2.4016927,112.0944 0,0 z',
  'm 372.74609,636.3457 c -69.95069,-0.58822 -115.7596,94.03139 -185.60351,97.93946 -64.3267,3.59935 -119.958172,-47.04675 -179.9375019,-70.57032 5.7859359,46.67417 19.0271609,93.36342 39.6933599,136.14454 64.502402,14.18858 107.287192,45.77666 163.517582,42.55664 60.5225,-3.46582 109.00161,-65.76356 169.62304,-65.59766 50.57127,0.13839 90.87219,50.52997 141.19922,55.49609 62.73014,6.19002 124.08365,-22.29125 186.125,-33.43945 18.87996,-43.02817 30.63542,-89.75463 36.69922,-136.33984 v -0.004 C 674.83875,683.77046 608.42057,733.64503 536.39062,726.24805 474.47812,719.89006 434.982,636.86904 372.74609,636.3457 Z',
  'm 380.03925,776.81872 c -60.62143,-0.1659 -109.10054,62.13184 -169.62304,65.59766 -56.23499,3.22029 -99.02196,-28.37365 -163.53321,-42.56055 0.0018,0.004 0.0021,0.008 0.0039,0.0117 30.954943,64.0722 78.58407,119.37085 142.83984,152.69335 123.54534,64.72852 284.10323,65.44122 402.48633,-11.627 52.98889,-35.0468 90.26765,-85.33532 115.15625,-142.05463 l 0.002,-0.006 c -62.04404,11.1472 -123.40001,39.63168 -186.13281,33.4414 -50.32703,-4.96612 -90.62795,-55.3577 -141.19922,-55.49609 z'
]
let t_stripes = [
  'm 722.61104,371.08596 c -229.8458,48.69134 -461.28539,50.57223 -695.664008,0.50781 -5.52518,19.21851 -10.20896,38.69666 -14.03906,58.34961 243.678538,52.25727 485.244768,50.24015 723.845668,-0.52734 -3.8601,-19.64487 -8.5713,-39.1147 -14.1426,-58.33008 z',
  'm 669.71824,242.25197 c -191.05246,42.11821 -385.38676,54.67499 -591.884658,3.09375 -9.5672,17.96878 -18.2616,36.41785 -26.0762,55.25782 226.584298,58.87323 439.816658,43.71715 644.785158,-2.88672 -8.0214,-18.89384 -16.9578,-37.41144 -26.8243,-55.46485 z',
  'm 158.03296,129.75393 c -14.6863,16.48048 -28.3651,33.77509 -41.0254,51.77343 169.7294,42.61034 342.461,43.95539 514.81838,0.22266 -12.5588,-17.92084 -26.034,-35.32026 -40.4707,-51.84766 -145.27088,33.06165 -289.81638,32.1895 -433.32228,-0.14843 z'
]
let b_stripes = [
  'm 380.0388,776.81838 c -110.24898,0.14552 -220.54294,7.93209 -333.156248,23.03711 9.51042,19.6867 20.60245,38.54019 33.25977,56.1875 201.835788,-25.17083 395.497658,-26.00842 596.605518,-0.66992 11.8006,-17.80783 21.963,-36.76364 30.623,-56.5 -110.5129,-14.94165 -218.9029,-22.19781 -327.33204,-22.05469 z',
  'm 397.95676,636.6504 c -4.0038,-0.009 -8.0068,-0.008 -12.0078,0.002 -4.13,0.0101 -8.2577,0.0304 -12.3847,0.0606 -123.36567,0.90075 -245.4037,10.7048 -366.3594077,27.00199 2.45089,19.77091 6.2386397,39.54261 11.3613297,59.0215 234.712488,-31.3851 471.952758,-37.6011 714.607358,-1.1681 4.7249,-19.5101 8.3179,-39.286 10.8887,-59.0371 C 627.41834,644.9132 512.11364,636.91074 397.95676,636.6504 Z',
  'm 235.23218,526.79494 c -79.5892,0.079 -157.982718,1.63836 -234.53319774,6.00391 -0.88741,20.04988 -0.91331,40.1206 -0.0723,60.125 C 235.14073,579.28213 491.73704,592.81881 749.49194,593.57424 c 0.7439,-19.98476 0.6617,-40.01362 -0.252,-60.00781 -160.1604,-0.48597 -321.00005,-6.04228 -477.63474,-6.70899 -12.15052,-0.0517 -24.27543,-0.0745 -36.37305,-0.0625 z'
]
let t_items = [t_stars, t_circles, t_waves, t_stripes]
let b_items = [b_stars, b_circles, b_waves, b_stripes]
let choices = [t_items.length, b_items.length, palettes.length]

function encode_words(words, mods) {
  // Pre-condition: words.length == mods.length == 3
  let results = []
  for (let i = 0; i < 3; i++) {
    let word = words[i]
    let result = word.charCodeAt(0)
    for (let c = 1; c < word.length; c++) {
      result = result ^ word.charCodeAt(c) // Bitwise XOR
    }
    results.push(result % mods[i])
  }
  return results
}

function get_egg_svg(three_words) {
  // Precondition: three_words is a string of the form word1.word2.word3
  let egg_options = encode_words(three_words, choices)
  let palette = palettes[egg_options[2]]
  let top_svg = ''
  let p_count = 0
  let bottom_svg = ''
  for (let i = 0; i < t_items[egg_options[0]].length; i++) {
    top_svg +=
      "<path d='" +
      t_items[egg_options[0]][i] +
      "' fill='" +
      palette[p_count + 1] +
      "' />"
    p_count = (p_count + 1) % (palette.length - 1)
  }
  for (let j = 0; j < b_items[egg_options[1]].length; j++) {
    bottom_svg +=
      "<path d='" +
      b_items[egg_options[1]][j] +
      "' fill='" +
      palette[p_count + 1] +
      "' />"
    p_count = (p_count + 1) % (palette.length - 1)
  }
  let egg_svg =
    "<path d='" +
    egg_path +
    "' fill='" +
    palette[0] +
    "' />" +
    top_svg +
    bottom_svg
  return egg_svg
}

const Egg = ({ id, className, size = '10' }) => {
  const found = eggs.filter(({ egg_id }) => {
    return egg_id === id
  })

  if (found.length > 0) {
    const [{ three_words }] = found

    return (
      <div className={`${className} w-${size}`}>
        <svg
          viewBox="0 0 750 1000"
          dangerouslySetInnerHTML={{ __html: get_egg_svg(three_words) }}
        ></svg>
      </div>
    )
  } else {
    return (
      <div className={`w-${size}`}>
        <svg viewBox="0 0 750 1000">
          <path
            d="M 748.22738,617.27582 C 741.56542,739.09258 698.47008,870.65596 592.21291,940.93445 473.82988,1018.0025 313.27239,1017.289 189.727,952.56061 81.582452,896.47785 20.533549,778.14644 6.8101586,660.50444 -23.438768,447.93424 47.345632,215.92541 213.86979,75.307502 268.55076,31.399454 338.94205,-15.626627 412.23386,5.0056437 523.43044,41.3255 606.7546,133.82793 664.25447,232.45839 c 66.17223,115.96725 93.25951,252.07892 83.97291,384.81743 z"
            fill="#e8e8e8"
          />
        </svg>
      </div>
    )
  }
}

export const RawEgg = ({ id, tx, ty }) => {
  const found = eggs.filter(({ egg_id }) => {
    return egg_id === id
  })
  if (found.length > 0) {
    const [{ three_words }] = found

    return (
      <g
        transform={`translate(${tx} ${ty})`}
        dangerouslySetInnerHTML={{ __html: get_egg_svg(three_words) }}
      ></g>
    )
  } else {
    return (
      <g transform={''}>
        <path
          d="M 748.22738,617.27582 C 741.56542,739.09258 698.47008,870.65596 592.21291,940.93445 473.82988,1018.0025 313.27239,1017.289 189.727,952.56061 81.582452,896.47785 20.533549,778.14644 6.8101586,660.50444 -23.438768,447.93424 47.345632,215.92541 213.86979,75.307502 268.55076,31.399454 338.94205,-15.626627 412.23386,5.0056437 523.43044,41.3255 606.7546,133.82793 664.25447,232.45839 c 66.17223,115.96725 93.25951,252.07892 83.97291,384.81743 z"
          fill="#e8e8e8"
        />
      </g>
    )
  }
}

export const RandomEgg = ({ size }) => {
  let egg_idx = Math.floor(Math.random() * eggs.length)
  return <Egg size={size} id={egg_idx.toString().padStart(2, '0')} />
}

export default Egg
